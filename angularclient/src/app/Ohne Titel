#include <stdio.h>
//#include "../include/kernel/Scheduler.h"

#include "../libc/include/pthread.h"


void* func2(void* ptr)
{
   while(1){};


    return NULL;
}

void* func(void* ptr)
{

    pthread_t thread_2;

   // pthread_attr_t attribute;


    pthread_create(&thread_2, NULL, func2, NULL);
    if(pthread_cancel(thread_2))
        printf("Error cancelling thread because \n");


    int old_state;
    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);

    if(pthread_cancel(thread_2))
        printf("ERROR because thread no longer exists\n");

    pthread_join(thread_2, NULL);


    return NULL;
}

int main()
{
    // NULL when no attribute
    pthread_t thread_1;

    // calls is a function name
    pthread_create(&thread_1, NULL, func, NULL);

    // Waiting for when thread is completed
    pthread_join(thread_1, NULL);

    printf("Testcase end" );

    return 0;
}
